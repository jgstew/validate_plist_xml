---
name: Tag and Release

on:
  push:
    branches:
      - main
    paths:
      - "src/validate_plist_xml/__init__.py"
      - ".github/workflows/tag_and_release.yaml"

jobs:
  release_new_tag:
    name: Tag and Release
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v1"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(python ./setup.py --version)"
      # only make release if there is NOT a git tag for this version
      - name: 'Check: package version has corresponding git tag'
        id: tagged
        shell: bash
        run: git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.getversion.outputs.version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"
      # wait for all other tests to succeed
      - name: Wait for tests to succeed
        if: steps.tagged.outputs.tagged == 1
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: main
          running-workflow-name: 'Tag and Release'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
      - name: Automatically create github release
        if: steps.tagged.outputs.tagged == 1
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: v${{ steps.getversion.outputs.version }}
          prerelease: false
      - name: Install requirements
        if: steps.tagged.outputs.tagged == 1
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install build tools
        if: steps.tagged.outputs.tagged == 1
        run: pip install setuptools wheel build
      - name: Run build
        if: steps.tagged.outputs.tagged == 1
        run: python3 -m build
      - name: Publish distribution to PyPI
        if: steps.tagged.outputs.tagged == 1
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
      # test to see if this gets the wheelfile path
      # this can then be included in release files automatically
      # would need to put release after build though
      - name: Get Wheel File
        if: steps.tagged.outputs.tagged == 1
        id: getwheelfile
        shell: bash
        run: echo "::set-output name=wheelfile::$(find "dist" -type f -name "*.whl")"
